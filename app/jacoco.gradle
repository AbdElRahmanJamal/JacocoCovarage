apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.5"
}
// run gradlew clean createDebugCoverageReport jacocoTestReport
//gradlew clean createDebugCoverageReport jacocoTestReport sonarqube // run with sonarqube
//gradlew clean connectedAndroidTest test createDebugCoverageReport jacocoTestReport sonarqube
task jacocoTestReport(type: JacocoReport, dependsOn:  ['testDebugUnitTest','createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '*/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]

    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/*Debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])
}

sonarqube {
    properties {
        property "sonar.projectName", "jacocoSample"
        property "sonar.projectKey", "jacocoSample"
        property "sonar.login", "3f03f727d5de9e6cbc368c4fbb19d24a48f85c91"
        property "sonar.projectVersion", "1.0"
        property "sonar.exclusions", "build/**,**/*.png,*.iml, **/*generated*,robospice/**/*"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "kotlin"
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "./build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        //link to xml file that generated by jacoco

    }
}
